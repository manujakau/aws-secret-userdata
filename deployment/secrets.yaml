AWSTemplateFormatVersion: 2010-09-09

Parameters:
  EnvName:
    Description: Environment name tag
    Type: String
    Default: secretdemo

Resources:
  SecretPsqlRootPassword:
    Type: 'AWS::SecretsManager::Secret'
    Properties:
      Name: psqlrootpassword02
      Description: "PAQL root dynamically generated secret password."
      GenerateSecretString:
        PasswordLength: 24
        ExcludePunctuation: True
      Tags:
        -
          Key: Name
          Value: !Sub ${EnvName}-psql-secret

  SeLambdaFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
            - sts:AssumeRole
      Path: "/"
  
  SeLambdaFunctionPolicies:
    Type: "AWS::IAM::ManagedPolicy"
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'secretsmanager:*'
              - 'logs:*'
            Resource: '*'
      Roles:
        - !Ref SeLambdaFunctionRole

  SeLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Timeout: 15
      Handler: index.lambda_handler
      Role: !GetAtt SeLambdaFunctionRole.Arn
      Code:
        ZipFile:
          !Sub
            - |-
              import boto3

              def lambda_handler(event, context):
                  arn = event['SecretId']
                  token = event['ClientRequestToken']
                  step = event['Step']

                  service_client = boto3.client('secretsmanager')
                  metadata = service_client.describe_secret(SecretId=arn)
                  if not metadata['RotationEnabled']:
                      raise ValueError("Secret %s is not enabled for rotation" % arn)

                  if step == "createSecret":
                      create_secret(service_client, arn, token)
                  elif step == "setSecret":
                      set_secret(service_client, arn, token)
                  elif step == "testSecret":
                      test_secret(service_client, arn, token)
                  elif step == "finishSecret":
                      finish_secret(service_client, arn, token)
                  else:
                      raise ValueError("Invalid step parameter")

              def create_secret(service_client, arn, token):
                  service_client.get_secret_value(SecretId=arn, VersionStage="AWSCURRENT")
                  try:
                      service_client.get_secret_value(SecretId=arn, VersionId=token, VersionStage="AWSPENDING")
                  except service_client.exceptions.ResourceNotFoundException:
                      # Generate Secret
                      passwd = service_client.get_random_password(ExcludePunctuation=True)
                      # Put Secret
                      service_client.put_secret_value(SecretId=arn, ClientRequestToken=token, 
                              SecretString=passwd['RandomPassword'], VersionStages=['AWSPENDING'])

              def set_secret(service_client, arn, token):
                  print("set secret")

              def test_secret(service_client, arn, token):
                  print("test secret")

              def finish_secret(service_client, arn, token):
                  metadata = service_client.describe_secret(SecretId=arn)
                  for version in metadata["VersionIdsToStages"]:
                      if "AWSCURRENT" in metadata["VersionIdsToStages"][version]:
                          # Secret Already Set
                          if version == token:
                              return
                          # Update Secret
                          service_client.update_secret_version_stage(SecretId=arn, VersionStage="AWSCURRENT", 
                                  MoveToVersionId=token, RemoveFromVersionId=version)
                          break
            - lambda_function_role_arn: !Ref SeLambdaFunctionRole
  
  SecretRotationSchedule:
    Type: AWS::SecretsManager::RotationSchedule
    DependsOn: SeLambdaFunction 
    Properties:
      SecretId: !Ref SecretPsqlRootPassword
      RotationLambdaARN: !GetAtt SeLambdaFunction.Arn
      RotationRules:
        Duration: 2h
        ScheduleExpression: 'cron(0 1 * * ? *)'
  
  SePermissionForLambda:
    Type: AWS::Lambda::Permission
    DependsOn:
      - SeLambdaFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SeLambdaFunction
      Principal: 'secretsmanager.amazonaws.com'